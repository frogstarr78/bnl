# Autogenerated from a Treetop grammar. Edits may be lost.


module Bnl
	module Dsl
   include Treetop::Runtime

   def root
     @root ||= :sentence
   end

   module Sentence0
     def conjunction
       elements[0]
     end

     def fragment
       elements[1]
     end
   end

   module Sentence1
     def fragment
       elements[0]
     end

     def conjoined_fragments
       elements[1]
     end

     def period
       elements[2]
     end
   end

   module Sentence2
     def fragments
       [fragment] + conjoined_fragments.elements.collect {|frag| frag.fragment }
     end
   end

   def _nt_sentence
     start_index = index
     if node_cache[:sentence].has_key?(index)
       cached = node_cache[:sentence][index]
       if cached
         cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
         @index = cached.interval.end
       end
       return cached
     end

     i0, s0 = index, []
     r1 = _nt_fragment
     s0 << r1
     if r1
       s2, i2 = [], index
       loop do
         i3, s3 = index, []
         r4 = _nt_conjunction
         s3 << r4
         if r4
           r5 = _nt_fragment
           s3 << r5
         end
         if s3.last
           r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
           r3.extend(Sentence0)
         else
           @index = i3
           r3 = nil
         end
         if r3
           s2 << r3
         else
           break
         end
       end
       r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
       s0 << r2
       if r2
         r6 = _nt_period
         s0 << r6
       end
     end
     if s0.last
       r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
       r0.extend(Sentence1)
       r0.extend(Sentence2)
     else
       @index = i0
       r0 = nil
     end

     node_cache[:sentence][start_index] = r0

     r0
   end

   module Fragment0
     def verb
       elements[0]
     end

     def space1
       elements[1]
     end

     def noun
       elements[3]
     end

     def space2
       elements[4]
     end

     def temporal
       elements[5]
     end
   end

   def _nt_fragment
     start_index = index
     if node_cache[:fragment].has_key?(index)
       cached = node_cache[:fragment][index]
       if cached
         cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
         @index = cached.interval.end
       end
       return cached
     end

     i0, s0 = index, []
     r1 = _nt_verb
     s0 << r1
     if r1
       r2 = _nt_space
       s0 << r2
       if r2
         r4 = _nt_article
         if r4
           r3 = r4
         else
           r3 = instantiate_node(SyntaxNode,input, index...index)
         end
         s0 << r3
         if r3
           r5 = _nt_noun
           s0 << r5
           if r5
             r6 = _nt_space
             s0 << r6
             if r6
               r7 = _nt_temporal
               s0 << r7
             end
           end
         end
       end
     end
     if s0.last
       r0 = instantiate_node(ActionItem,input, i0...index, s0)
       r0.extend(Fragment0)
     else
       @index = i0
       r0 = nil
     end

     node_cache[:fragment][start_index] = r0

     r0
   end

   def _nt_verb
     start_index = index
     if node_cache[:verb].has_key?(index)
       cached = node_cache[:verb][index]
       if cached
         cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
         @index = cached.interval.end
       end
       return cached
     end

     i0 = index
     if has_terminal?('begin', false, index)
       r1 = instantiate_node(SyntaxNode,input, index...(index + 5))
       @index += 5
     else
       terminal_parse_failure('begin')
       r1 = nil
     end
     if r1
       r0 = r1
       r0.extend(OrmMethods)
     else
       if has_terminal?('Begin', false, index)
         r2 = instantiate_node(SyntaxNode,input, index...(index + 5))
         @index += 5
       else
         terminal_parse_failure('Begin')
         r2 = nil
       end
       if r2
         r0 = r2
         r0.extend(OrmMethods)
       else
         if has_terminal?('start', false, index)
           r3 = instantiate_node(SyntaxNode,input, index...(index + 5))
           @index += 5
         else
           terminal_parse_failure('start')
           r3 = nil
         end
         if r3
           r0 = r3
           r0.extend(OrmMethods)
         else
           if has_terminal?('Start', false, index)
             r4 = instantiate_node(SyntaxNode,input, index...(index + 5))
             @index += 5
           else
             terminal_parse_failure('Start')
             r4 = nil
           end
           if r4
             r0 = r4
             r0.extend(OrmMethods)
           else
             if has_terminal?('restart', false, index)
               r5 = instantiate_node(SyntaxNode,input, index...(index + 7))
               @index += 7
             else
               terminal_parse_failure('restart')
               r5 = nil
             end
             if r5
               r0 = r5
               r0.extend(OrmMethods)
             else
               if has_terminal?('Restart', false, index)
                 r6 = instantiate_node(SyntaxNode,input, index...(index + 7))
                 @index += 7
               else
                 terminal_parse_failure('Restart')
                 r6 = nil
               end
               if r6
                 r0 = r6
                 r0.extend(OrmMethods)
               else
                 if has_terminal?('cease', false, index)
                   r7 = instantiate_node(SyntaxNode,input, index...(index + 5))
                   @index += 5
                 else
                   terminal_parse_failure('cease')
                   r7 = nil
                 end
                 if r7
                   r0 = r7
                   r0.extend(OrmMethods)
                 else
                   if has_terminal?('Cease', false, index)
                     r8 = instantiate_node(SyntaxNode,input, index...(index + 5))
                     @index += 5
                   else
                     terminal_parse_failure('Cease')
                     r8 = nil
                   end
                   if r8
                     r0 = r8
                     r0.extend(OrmMethods)
                   else
                     if has_terminal?('end', false, index)
                       r9 = instantiate_node(SyntaxNode,input, index...(index + 3))
                       @index += 3
                     else
                       terminal_parse_failure('end')
                       r9 = nil
                     end
                     if r9
                       r0 = r9
                       r0.extend(OrmMethods)
                     else
                       if has_terminal?('End', false, index)
                         r10 = instantiate_node(SyntaxNode,input, index...(index + 3))
                         @index += 3
                       else
                         terminal_parse_failure('End')
                         r10 = nil
                       end
                       if r10
                         r0 = r10
                         r0.extend(OrmMethods)
                       else
                         if has_terminal?('create', false, index)
                           r11 = instantiate_node(SyntaxNode,input, index...(index + 6))
                           @index += 6
                         else
                           terminal_parse_failure('create')
                           r11 = nil
                         end
                         if r11
                           r0 = r11
                           r0.extend(OrmMethods)
                         else
                           if has_terminal?('Create', false, index)
                             r12 = instantiate_node(SyntaxNode,input, index...(index + 6))
                             @index += 6
                           else
                             terminal_parse_failure('Create')
                             r12 = nil
                           end
                           if r12
                             r0 = r12
                             r0.extend(OrmMethods)
                           else
                             @index = i0
                             r0 = nil
                           end
                         end
                       end
                     end
                   end
                 end
               end
             end
           end
         end
       end
     end

     node_cache[:verb][start_index] = r0

     r0
   end

   module Noun0
   end

   def _nt_noun
     start_index = index
     if node_cache[:noun].has_key?(index)
       cached = node_cache[:noun][index]
       if cached
         cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
         @index = cached.interval.end
       end
       return cached
     end

     s0, i0 = [], index
     loop do
       i1, s1 = index, []
       i2 = index
       r3 = _nt_space
       if r3
         r2 = nil
       else
         @index = i2
         r2 = instantiate_node(SyntaxNode,input, index...index)
       end
       s1 << r2
       if r2
         if index < input_length
           r4 = instantiate_node(SyntaxNode,input, index...(index + 1))
           @index += 1
         else
           terminal_parse_failure("any character")
           r4 = nil
         end
         s1 << r4
       end
       if s1.last
         r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
         r1.extend(Noun0)
       else
         @index = i1
         r1 = nil
       end
       if r1
         s0 << r1
       else
         break
       end
     end
     if s0.empty?
       @index = i0
       r0 = nil
     else
       r0 = instantiate_node(OrmModel,input, i0...index, s0)
     end

     node_cache[:noun][start_index] = r0

     r0
   end

   module Article0
   end

   module Article1
     def space1
       elements[1]
     end

     def space2
       elements[3]
     end
   end

   def _nt_article
     start_index = index
     if node_cache[:article].has_key?(index)
       cached = node_cache[:article][index]
       if cached
         cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
         @index = cached.interval.end
       end
       return cached
     end

     i0, s0 = index, []
     i1 = index
     r2 = _nt_definite_articles
     if r2
       r1 = r2
     else
       r3 = _nt_indefinite_articles
       if r3
         r1 = r3
       else
         @index = i1
         r1 = nil
       end
     end
     s0 << r1
     if r1
       r4 = _nt_space
       s0 << r4
       if r4
         s5, i5 = [], index
         loop do
           i6, s6 = index, []
           i7 = index
           r8 = _nt_space
           if r8
             r7 = nil
           else
             @index = i7
             r7 = instantiate_node(SyntaxNode,input, index...index)
           end
           s6 << r7
           if r7
             if index < input_length
               r9 = instantiate_node(SyntaxNode,input, index...(index + 1))
               @index += 1
             else
               terminal_parse_failure("any character")
               r9 = nil
             end
             s6 << r9
           end
           if s6.last
             r6 = instantiate_node(SyntaxNode,input, i6...index, s6)
             r6.extend(Article0)
           else
             @index = i6
             r6 = nil
           end
           if r6
             s5 << r6
           else
             break
           end
         end
         if s5.empty?
           @index = i5
           r5 = nil
         else
           r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
         end
         s0 << r5
         if r5
           r10 = _nt_space
           s0 << r10
         end
       end
     end
     if s0.last
       r0 = instantiate_node(Klass,input, i0...index, s0)
       r0.extend(Article1)
     else
       @index = i0
       r0 = nil
     end

     node_cache[:article][start_index] = r0

     r0
   end

   def _nt_definite_articles
     start_index = index
     if node_cache[:definite_articles].has_key?(index)
       cached = node_cache[:definite_articles][index]
       if cached
         cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
         @index = cached.interval.end
       end
       return cached
     end

     if has_terminal?('the', false, index)
       r0 = instantiate_node(SyntaxNode,input, index...(index + 3))
       @index += 3
     else
       terminal_parse_failure('the')
       r0 = nil
     end

     node_cache[:definite_articles][start_index] = r0

     r0
   end

   module IndefiniteArticles0
     def space
       elements[0]
     end

     def consonant_adjectives
       elements[1]
     end
   end

   module IndefiniteArticles1
   end

   def _nt_indefinite_articles
     start_index = index
     if node_cache[:indefinite_articles].has_key?(index)
       cached = node_cache[:indefinite_articles][index]
       if cached
         cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
         @index = cached.interval.end
       end
       return cached
     end

     i0, s0 = index, []
     i1 = index
     if has_terminal?('an', false, index)
       r2 = instantiate_node(SyntaxNode,input, index...(index + 2))
       @index += 2
     else
       terminal_parse_failure('an')
       r2 = nil
     end
     if r2
       r1 = r2
     else
       if has_terminal?('a', false, index)
         r3 = instantiate_node(SyntaxNode,input, index...(index + 1))
         @index += 1
       else
         terminal_parse_failure('a')
         r3 = nil
       end
       if r3
         r1 = r3
       else
         @index = i1
         r1 = nil
       end
     end
     s0 << r1
     if r1
       i5, s5 = index, []
       r6 = _nt_space
       s5 << r6
       if r6
         r7 = _nt_consonant_adjectives
         s5 << r7
       end
       if s5.last
         r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
         r5.extend(IndefiniteArticles0)
       else
         @index = i5
         r5 = nil
       end
       if r5
         r4 = r5
       else
         r4 = instantiate_node(SyntaxNode,input, index...index)
       end
       s0 << r4
     end
     if s0.last
       r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
       r0.extend(IndefiniteArticles1)
     else
       @index = i0
       r0 = nil
     end

     node_cache[:indefinite_articles][start_index] = r0

     r0
   end

   def _nt_consonant_adjectives
     start_index = index
     if node_cache[:consonant_adjectives].has_key?(index)
       cached = node_cache[:consonant_adjectives][index]
       if cached
         cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
         @index = cached.interval.end
       end
       return cached
     end

     if has_terminal?('new', false, index)
       r0 = instantiate_node(SyntaxNode,input, index...(index + 3))
       @index += 3
     else
       terminal_parse_failure('new')
       r0 = nil
     end

     node_cache[:consonant_adjectives][start_index] = r0

     r0
   end

   def _nt_vowel_adjectives
     start_index = index
     if node_cache[:vowel_adjectives].has_key?(index)
       cached = node_cache[:vowel_adjectives][index]
       if cached
         cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
         @index = cached.interval.end
       end
       return cached
     end

     i0 = index
     r1 = _nt_space
     if r1
       r0 = nil
     else
       @index = i0
       r0 = instantiate_node(SyntaxNode,input, index...index)
     end

     node_cache[:vowel_adjectives][start_index] = r0

     r0
   end

   module Temporal0
     def preposition
       elements[0]
     end

     def space
       elements[1]
     end

     def literal
       elements[2]
     end
   end

   def _nt_temporal
     start_index = index
     if node_cache[:temporal].has_key?(index)
       cached = node_cache[:temporal][index]
       if cached
         cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
         @index = cached.interval.end
       end
       return cached
     end

     i0, s0 = index, []
     r1 = _nt_preposition
     s0 << r1
     if r1
       r2 = _nt_space
       s0 << r2
       if r2
         r3 = _nt_literal
         s0 << r3
       end
     end
     if s0.last
       r0 = instantiate_node(TemporalValue,input, i0...index, s0)
       r0.extend(Temporal0)
     else
       @index = i0
       r0 = nil
     end

     node_cache[:temporal][start_index] = r0

     r0
   end

   module Literal0
   end

   def _nt_literal
     start_index = index
     if node_cache[:literal].has_key?(index)
       cached = node_cache[:literal][index]
       if cached
         cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
         @index = cached.interval.end
       end
       return cached
     end

     s0, i0 = [], index
     loop do
       i1, s1 = index, []
       i2 = index
       r3 = _nt_meaningless_conjunction
       if r3
         r2 = nil
       else
         @index = i2
         r2 = instantiate_node(SyntaxNode,input, index...index)
       end
       s1 << r2
       if r2
         i4 = index
         r5 = _nt_conjunction
         if r5
           r4 = nil
         else
           @index = i4
           r4 = instantiate_node(SyntaxNode,input, index...index)
         end
         s1 << r4
         if r4
           i6 = index
           r7 = _nt_period
           if r7
             r6 = nil
           else
             @index = i6
             r6 = instantiate_node(SyntaxNode,input, index...index)
           end
           s1 << r6
           if r6
             if index < input_length
               r8 = instantiate_node(SyntaxNode,input, index...(index + 1))
               @index += 1
             else
               terminal_parse_failure("any character")
               r8 = nil
             end
             s1 << r8
           end
         end
       end
       if s1.last
         r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
         r1.extend(Literal0)
       else
         @index = i1
         r1 = nil
       end
       if r1
         s0 << r1
       else
         break
       end
     end
     if s0.empty?
       @index = i0
       r0 = nil
     else
       r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
     end

     node_cache[:literal][start_index] = r0

     r0
   end

   def _nt_preposition
     start_index = index
     if node_cache[:preposition].has_key?(index)
       cached = node_cache[:preposition][index]
       if cached
         cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
         @index = cached.interval.end
       end
       return cached
     end

     i0 = index
     if has_terminal?('on', false, index)
       r1 = instantiate_node(SyntaxNode,input, index...(index + 2))
       @index += 2
     else
       terminal_parse_failure('on')
       r1 = nil
     end
     if r1
       r0 = r1
     else
       if has_terminal?('at', false, index)
         r2 = instantiate_node(SyntaxNode,input, index...(index + 2))
         @index += 2
       else
         terminal_parse_failure('at')
         r2 = nil
       end
       if r2
         r0 = r2
       else
         @index = i0
         r0 = nil
       end
     end

     node_cache[:preposition][start_index] = r0

     r0
   end

   def _nt_conjunction
     start_index = index
     if node_cache[:conjunction].has_key?(index)
       cached = node_cache[:conjunction][index]
       if cached
         cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
         @index = cached.interval.end
       end
       return cached
     end

     r0 = _nt_continuation

     node_cache[:conjunction][start_index] = r0

     r0
   end

   module Continuation0
     def space
       elements[0]
     end

   end

   module Continuation1
     def comma
       elements[0]
     end

     def space
       elements[1]
     end

   end

   module Continuation2
     def space
       elements[1]
     end
   end

   def _nt_continuation
     start_index = index
     if node_cache[:continuation].has_key?(index)
       cached = node_cache[:continuation][index]
       if cached
         cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
         @index = cached.interval.end
       end
       return cached
     end

     i0, s0 = index, []
     i1 = index
     i2, s2 = index, []
     r3 = _nt_space
     s2 << r3
     if r3
       if has_terminal?('and', false, index)
         r4 = instantiate_node(SyntaxNode,input, index...(index + 3))
         @index += 3
       else
         terminal_parse_failure('and')
         r4 = nil
       end
       s2 << r4
     end
     if s2.last
       r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
       r2.extend(Continuation0)
     else
       @index = i2
       r2 = nil
     end
     if r2
       r1 = r2
     else
       i5, s5 = index, []
       r6 = _nt_comma
       s5 << r6
       if r6
         r7 = _nt_space
         s5 << r7
         if r7
           if has_terminal?('and', false, index)
             r8 = instantiate_node(SyntaxNode,input, index...(index + 3))
             @index += 3
           else
             terminal_parse_failure('and')
             r8 = nil
           end
           s5 << r8
         end
       end
       if s5.last
         r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
         r5.extend(Continuation1)
       else
         @index = i5
         r5 = nil
       end
       if r5
         r1 = r5
       else
         r9 = _nt_comma
         if r9
           r1 = r9
         else
           @index = i1
           r1 = nil
         end
       end
     end
     s0 << r1
     if r1
       r10 = _nt_space
       s0 << r10
     end
     if s0.last
       r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
       r0.extend(Continuation2)
     else
       @index = i0
       r0 = nil
     end

     node_cache[:continuation][start_index] = r0

     r0
   end

   def _nt_meaningless_conjunction
     start_index = index
     if node_cache[:meaningless_conjunction].has_key?(index)
       cached = node_cache[:meaningless_conjunction][index]
       if cached
         cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
         @index = cached.interval.end
       end
       return cached
     end

     if has_terminal?('or', false, index)
       r0 = instantiate_node(SyntaxNode,input, index...(index + 2))
       @index += 2
     else
       terminal_parse_failure('or')
       r0 = nil
     end

     node_cache[:meaningless_conjunction][start_index] = r0

     r0
   end

   def _nt_space
     start_index = index
     if node_cache[:space].has_key?(index)
       cached = node_cache[:space][index]
       if cached
         cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
         @index = cached.interval.end
       end
       return cached
     end

     if has_terminal?(' ', false, index)
       r0 = instantiate_node(SyntaxNode,input, index...(index + 1))
       @index += 1
     else
       terminal_parse_failure(' ')
       r0 = nil
     end

     node_cache[:space][start_index] = r0

     r0
   end

   def _nt_comma
     start_index = index
     if node_cache[:comma].has_key?(index)
       cached = node_cache[:comma][index]
       if cached
         cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
         @index = cached.interval.end
       end
       return cached
     end

     if has_terminal?(',', false, index)
       r0 = instantiate_node(SyntaxNode,input, index...(index + 1))
       @index += 1
     else
       terminal_parse_failure(',')
       r0 = nil
     end

     node_cache[:comma][start_index] = r0

     r0
   end

   def _nt_period
     start_index = index
     if node_cache[:period].has_key?(index)
       cached = node_cache[:period][index]
       if cached
         cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
         @index = cached.interval.end
       end
       return cached
     end

     if has_terminal?('.', false, index)
       r0 = instantiate_node(SyntaxNode,input, index...(index + 1))
       @index += 1
     else
       terminal_parse_failure('.')
       r0 = nil
     end

     node_cache[:period][start_index] = r0

     r0
   end

 end

 class DslParser < Treetop::Runtime::CompiledParser
   include Dsl
 end

end
